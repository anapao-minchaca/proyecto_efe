
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AFARRAFAY AND ASG BOFOOFOL CA CC CHAFAR CHAR CMP COMA DIF DIV EFELSEFE FAFALSEFE FLOFOAFAT FUNCTION ID IFIF IFINPUFUT IFINT INT LLAVEA LLAVEC MAFAIFIN MAY MAYIG MEN MENIG MUL NOT OR PA PC PCC POT PRIFINT PUNTO PYC REAL RED REFETUFURN RES STRIFING STRUFUCT SUM TRUFUEFE VACIO VOFOIFID WHIFILEFE start : declarar_estructuras declarar_main\n                | declarar_funciones declarar_main\n                | declarar_estructuras declarar_funciones declarar_main\n                | declarar_main  declarar_estructuras : STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC  declarar_funciones : FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC \n                            | FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC\n                            | FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC \n                            | FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC declarar_main : IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC  tipo_dato :  IFINT\n        | STRIFING\n        | AFARRAFAY\n        | STRUFUCT\n        | VOFOIFID\n        | CHAFAR\n        | BOFOOFOL\n        | FLOFOAFAT  bloque_codigo : declarar_if bloque_codigo\n                        | declaracion bloque_codigo\n                        | asignar_estructuras bloque_codigo\n                        | funcion bloque_codigo\n                        | print bloque_codigo\n                        | input bloque_codigo\n                        | declaracion_while bloque_codigo\n                        | VACIO  declarar_if : IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC\n        | IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC  declaracion : tipo_dato ID PYC\n        | tipo_dato ID ASG ID operacion_matematica ID PYC\n        | tipo_dato ID ASG valores PYC  asignar_estructuras : ID PUNTO ID ASG  funcion  : ID PA valores PC PYC\n            | ID PA PC PYC\n            | ID PA valores COMA valores PC PYC print : PRIFINT PA ID PC PYC input : IFINPUFUT PA ID PC PYC  declaracion_while : WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC condicion : valores operadores valores\n                | valores \n                | valores operadores_logicos condicion\n                | valores NOT valores operacion_matematica : SUM \n                        | RES \n                        | MUL \n                        | DIV \n                        | RED \n                        | POT valores : INT \n            | CHAR \n            | TRUFUEFE \n            | FAFALSEFE \n            | PCC \n            | ID operadores : MEN \n                | MAY \n                | MENIG \n                | MAYIG \n                | CMP \n                | DIF  operadores_logicos : AND \n                        | OR empty :'
    
_lr_action_items = {'STRUFUCT':([0,6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-29,-32,-34,16,-31,-33,-36,-37,16,16,-27,-30,-35,-38,16,-28,]),'FUNCTION':([0,2,118,],[6,6,-5,]),'IFINT':([0,2,4,6,9,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,118,122,123,134,135,137,138,139,141,142,149,150,151,152,153,157,160,161,],[7,7,7,13,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-29,-32,-34,-5,-8,13,-31,-33,-36,-37,13,13,-7,-27,-30,-35,-38,-6,13,-9,-28,]),'$end':([1,3,8,10,22,96,],[0,-4,-1,-2,-3,-10,]),'ID':([5,12,13,14,15,16,17,18,19,20,26,30,32,35,37,38,39,40,41,42,43,46,51,63,65,66,67,68,69,71,72,73,83,84,98,99,100,101,102,103,104,105,106,107,108,111,113,114,119,123,127,128,129,130,131,132,133,134,135,137,138,139,141,149,150,151,152,154,157,161,],[11,24,-11,-12,-13,-14,-15,-16,-17,-18,29,34,47,47,47,47,47,47,47,47,47,64,70,82,85,82,88,89,82,47,93,94,-29,109,82,82,82,-55,-56,-57,-58,-59,-60,-61,-62,-32,82,-34,140,47,144,-43,-44,-45,-46,-47,-48,-31,-33,-36,-37,47,47,-27,-30,-35,-38,156,47,-28,]),'STRIFING':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-29,-32,-34,14,-31,-33,-36,-37,14,14,-27,-30,-35,-38,14,-28,]),'AFARRAFAY':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-29,-32,-34,15,-31,-33,-36,-37,15,15,-27,-30,-35,-38,15,-28,]),'VOFOIFID':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-29,-32,-34,17,-31,-33,-36,-37,17,17,-27,-30,-35,-38,17,-28,]),'CHAFAR':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-29,-32,-34,18,-31,-33,-36,-37,18,18,-27,-30,-35,-38,18,-28,]),'BOFOOFOL':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-29,-32,-34,19,-31,-33,-36,-37,19,19,-27,-30,-35,-38,19,-28,]),'FLOFOAFAT':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-29,-32,-34,20,-31,-33,-36,-37,20,20,-27,-30,-35,-38,20,-28,]),'MAFAIFIN':([7,],[21,]),'LLAVEA':([11,28,31,52,97,117,120,155,],[23,32,35,71,123,139,141,157,]),'PA':([21,24,45,47,48,49,50,],[25,27,63,66,67,68,69,]),'PC':([25,27,34,66,75,76,77,78,79,80,81,82,86,88,89,90,93,124,125,126,136,],[28,31,52,87,97,-40,-49,-50,-51,-52,-53,-54,112,115,116,117,120,-39,-41,-42,145,]),'PYC':([29,55,64,70,73,77,78,79,80,81,87,94,109,110,112,115,116,140,144,145,156,],[33,74,83,91,95,-49,-50,-51,-52,-53,114,121,-54,134,135,137,138,147,150,151,158,]),'VACIO':([32,35,37,38,39,40,41,42,43,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[44,44,44,44,44,44,44,44,44,44,-29,-32,-34,44,-31,-33,-36,-37,44,44,-27,-30,-35,-38,44,-28,]),'IFIF':([32,35,37,38,39,40,41,42,43,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[45,45,45,45,45,45,45,45,45,45,-29,-32,-34,45,-31,-33,-36,-37,45,45,-27,-30,-35,-38,45,-28,]),'PRIFINT':([32,35,37,38,39,40,41,42,43,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[48,48,48,48,48,48,48,48,48,48,-29,-32,-34,48,-31,-33,-36,-37,48,48,-27,-30,-35,-38,48,-28,]),'IFINPUFUT':([32,35,37,38,39,40,41,42,43,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[49,49,49,49,49,49,49,49,49,49,-29,-32,-34,49,-31,-33,-36,-37,49,49,-27,-30,-35,-38,49,-28,]),'WHIFILEFE':([32,35,37,38,39,40,41,42,43,71,83,111,114,123,134,135,137,138,139,141,149,150,151,152,157,161,],[50,50,50,50,50,50,50,50,50,50,-29,-32,-34,50,-31,-33,-36,-37,50,50,-27,-30,-35,-38,50,-28,]),'COMA':([34,77,78,79,80,81,82,86,],[53,-49,-50,-51,-52,-53,-54,113,]),'REFETUFURN':([36,44,54,56,57,58,59,60,61,62,92,148,],[55,-26,73,-19,-20,-21,-22,-23,-24,-25,119,154,]),'LLAVEC':([44,56,57,58,59,60,61,62,74,91,95,121,143,146,147,158,159,],[-26,-19,-20,-21,-22,-23,-24,-25,96,118,122,142,149,152,153,160,161,]),'PUNTO':([47,],[65,]),'INT':([63,66,69,84,98,99,100,101,102,103,104,105,106,107,108,113,],[77,77,77,77,77,77,77,-55,-56,-57,-58,-59,-60,-61,-62,77,]),'CHAR':([63,66,69,84,98,99,100,101,102,103,104,105,106,107,108,113,],[78,78,78,78,78,78,78,-55,-56,-57,-58,-59,-60,-61,-62,78,]),'TRUFUEFE':([63,66,69,84,98,99,100,101,102,103,104,105,106,107,108,113,],[79,79,79,79,79,79,79,-55,-56,-57,-58,-59,-60,-61,-62,79,]),'FAFALSEFE':([63,66,69,84,98,99,100,101,102,103,104,105,106,107,108,113,],[80,80,80,80,80,80,80,-55,-56,-57,-58,-59,-60,-61,-62,80,]),'PCC':([63,66,69,84,98,99,100,101,102,103,104,105,106,107,108,113,],[81,81,81,81,81,81,81,-55,-56,-57,-58,-59,-60,-61,-62,81,]),'ASG':([64,85,],[84,111,]),'NOT':([76,77,78,79,80,81,82,],[100,-49,-50,-51,-52,-53,-54,]),'MEN':([76,77,78,79,80,81,82,],[101,-49,-50,-51,-52,-53,-54,]),'MAY':([76,77,78,79,80,81,82,],[102,-49,-50,-51,-52,-53,-54,]),'MENIG':([76,77,78,79,80,81,82,],[103,-49,-50,-51,-52,-53,-54,]),'MAYIG':([76,77,78,79,80,81,82,],[104,-49,-50,-51,-52,-53,-54,]),'CMP':([76,77,78,79,80,81,82,],[105,-49,-50,-51,-52,-53,-54,]),'DIF':([76,77,78,79,80,81,82,],[106,-49,-50,-51,-52,-53,-54,]),'AND':([76,77,78,79,80,81,82,],[107,-49,-50,-51,-52,-53,-54,]),'OR':([76,77,78,79,80,81,82,],[108,-49,-50,-51,-52,-53,-54,]),'SUM':([109,],[128,]),'RES':([109,],[129,]),'MUL':([109,],[130,]),'DIV':([109,],[131,]),'RED':([109,],[132,]),'POT':([109,],[133,]),'EFELSEFE':([149,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'declarar_estructuras':([0,],[2,]),'declarar_main':([0,2,4,9,],[3,8,10,22,]),'declarar_funciones':([0,2,],[4,9,]),'tipo_dato':([6,23,27,32,33,35,37,38,39,40,41,42,43,53,71,123,139,141,157,],[12,26,30,46,51,46,46,46,46,46,46,46,46,72,46,46,46,46,46,]),'bloque_codigo':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[36,54,56,57,58,59,60,61,62,92,143,146,148,159,]),'declarar_if':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'declaracion':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'asignar_estructuras':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'funcion':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'print':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'input':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'declaracion_while':([32,35,37,38,39,40,41,42,43,71,123,139,141,157,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'condicion':([63,69,99,],[75,90,125,]),'valores':([63,66,69,84,98,99,100,113,],[76,86,76,110,124,76,126,136,]),'operadores':([76,],[98,]),'operadores_logicos':([76,],[99,]),'operacion_matematica':([109,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> declarar_estructuras declarar_main','start',2,'p_programa','sintactico.py',9),
  ('start -> declarar_funciones declarar_main','start',2,'p_programa','sintactico.py',10),
  ('start -> declarar_estructuras declarar_funciones declarar_main','start',3,'p_programa','sintactico.py',11),
  ('start -> declarar_main','start',1,'p_programa','sintactico.py',12),
  ('declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC','declarar_estructuras',10,'p_declarar_estructuras','sintactico.py',16),
  ('declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC','declarar_funciones',13,'p_declarar_funciones','sintactico.py',20),
  ('declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC','declarar_funciones',11,'p_declarar_funciones','sintactico.py',21),
  ('declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC','declarar_funciones',10,'p_declarar_funciones','sintactico.py',22),
  ('declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC','declarar_funciones',16,'p_declarar_funciones','sintactico.py',23),
  ('declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC','declarar_main',9,'p_declarar_main','sintactico.py',27),
  ('tipo_dato -> IFINT','tipo_dato',1,'p_tipo_dato','sintactico.py',31),
  ('tipo_dato -> STRIFING','tipo_dato',1,'p_tipo_dato','sintactico.py',32),
  ('tipo_dato -> AFARRAFAY','tipo_dato',1,'p_tipo_dato','sintactico.py',33),
  ('tipo_dato -> STRUFUCT','tipo_dato',1,'p_tipo_dato','sintactico.py',34),
  ('tipo_dato -> VOFOIFID','tipo_dato',1,'p_tipo_dato','sintactico.py',35),
  ('tipo_dato -> CHAFAR','tipo_dato',1,'p_tipo_dato','sintactico.py',36),
  ('tipo_dato -> BOFOOFOL','tipo_dato',1,'p_tipo_dato','sintactico.py',37),
  ('tipo_dato -> FLOFOAFAT','tipo_dato',1,'p_tipo_dato','sintactico.py',38),
  ('bloque_codigo -> declarar_if bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',41),
  ('bloque_codigo -> declaracion bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',42),
  ('bloque_codigo -> asignar_estructuras bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',43),
  ('bloque_codigo -> funcion bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',44),
  ('bloque_codigo -> print bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',45),
  ('bloque_codigo -> input bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',46),
  ('bloque_codigo -> declaracion_while bloque_codigo','bloque_codigo',2,'p_bloque_codigo','sintactico.py',47),
  ('bloque_codigo -> VACIO','bloque_codigo',1,'p_bloque_codigo','sintactico.py',48),
  ('declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC','declarar_if',7,'p_declarar_if','sintactico.py',51),
  ('declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC','declarar_if',11,'p_declarar_if','sintactico.py',52),
  ('declaracion -> tipo_dato ID PYC','declaracion',3,'p_declaracion','sintactico.py',56),
  ('declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC','declaracion',7,'p_declaracion','sintactico.py',57),
  ('declaracion -> tipo_dato ID ASG valores PYC','declaracion',5,'p_declaracion','sintactico.py',58),
  ('asignar_estructuras -> ID PUNTO ID ASG','asignar_estructuras',4,'p_asignar_estructuras','sintactico.py',64),
  ('funcion -> ID PA valores PC PYC','funcion',5,'p_funcion','sintactico.py',68),
  ('funcion -> ID PA PC PYC','funcion',4,'p_funcion','sintactico.py',69),
  ('funcion -> ID PA valores COMA valores PC PYC','funcion',7,'p_funcion','sintactico.py',70),
  ('print -> PRIFINT PA ID PC PYC','print',5,'p_print','sintactico.py',73),
  ('input -> IFINPUFUT PA ID PC PYC','input',5,'p_input','sintactico.py',77),
  ('declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC','declaracion_while',7,'p_declaracion_while','sintactico.py',80),
  ('condicion -> valores operadores valores','condicion',3,'p_condicion','sintactico.py',84),
  ('condicion -> valores','condicion',1,'p_condicion','sintactico.py',85),
  ('condicion -> valores operadores_logicos condicion','condicion',3,'p_condicion','sintactico.py',86),
  ('condicion -> valores NOT valores','condicion',3,'p_condicion','sintactico.py',87),
  ('operacion_matematica -> SUM','operacion_matematica',1,'p_operacion_matematica','sintactico.py',90),
  ('operacion_matematica -> RES','operacion_matematica',1,'p_operacion_matematica','sintactico.py',91),
  ('operacion_matematica -> MUL','operacion_matematica',1,'p_operacion_matematica','sintactico.py',92),
  ('operacion_matematica -> DIV','operacion_matematica',1,'p_operacion_matematica','sintactico.py',93),
  ('operacion_matematica -> RED','operacion_matematica',1,'p_operacion_matematica','sintactico.py',94),
  ('operacion_matematica -> POT','operacion_matematica',1,'p_operacion_matematica','sintactico.py',95),
  ('valores -> INT','valores',1,'p_valores','sintactico.py',98),
  ('valores -> CHAR','valores',1,'p_valores','sintactico.py',99),
  ('valores -> TRUFUEFE','valores',1,'p_valores','sintactico.py',100),
  ('valores -> FAFALSEFE','valores',1,'p_valores','sintactico.py',101),
  ('valores -> PCC','valores',1,'p_valores','sintactico.py',102),
  ('valores -> ID','valores',1,'p_valores','sintactico.py',103),
  ('operadores -> MEN','operadores',1,'p_operadores','sintactico.py',106),
  ('operadores -> MAY','operadores',1,'p_operadores','sintactico.py',107),
  ('operadores -> MENIG','operadores',1,'p_operadores','sintactico.py',108),
  ('operadores -> MAYIG','operadores',1,'p_operadores','sintactico.py',109),
  ('operadores -> CMP','operadores',1,'p_operadores','sintactico.py',110),
  ('operadores -> DIF','operadores',1,'p_operadores','sintactico.py',111),
  ('operadores_logicos -> AND','operadores_logicos',1,'p_operadores_logicos','sintactico.py',114),
  ('operadores_logicos -> OR','operadores_logicos',1,'p_operadores_logicos','sintactico.py',115),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',118),
]
