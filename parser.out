Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CA
    CC
    REAL

Grammar

Rule 0     S' -> start
Rule 1     start -> declarar_estructuras declarar_main
Rule 2     start -> declarar_funciones declarar_main
Rule 3     start -> declarar_estructuras declarar_funciones declarar_main
Rule 4     start -> declarar_main
Rule 5     declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC
Rule 6     declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
Rule 7     declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
Rule 8     declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
Rule 9     declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
Rule 10    declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
Rule 11    tipo_dato -> IFINT
Rule 12    tipo_dato -> STRIFING
Rule 13    tipo_dato -> AFARRAFAY
Rule 14    tipo_dato -> STRUFUCT
Rule 15    tipo_dato -> VOFOIFID
Rule 16    tipo_dato -> CHAFAR
Rule 17    tipo_dato -> BOFOOFOL
Rule 18    tipo_dato -> FLOFOAFAT
Rule 19    bloque_codigo -> declarar_if bloque_codigo
Rule 20    bloque_codigo -> declaracion bloque_codigo
Rule 21    bloque_codigo -> asignar_estructuras bloque_codigo
Rule 22    bloque_codigo -> funcion bloque_codigo
Rule 23    bloque_codigo -> print bloque_codigo
Rule 24    bloque_codigo -> input bloque_codigo
Rule 25    bloque_codigo -> declaracion_while bloque_codigo
Rule 26    bloque_codigo -> VACIO
Rule 27    declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
Rule 28    declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
Rule 29    declaracion -> tipo_dato ID PYC
Rule 30    declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC
Rule 31    declaracion -> tipo_dato ID ASG valores PYC
Rule 32    asignar_estructuras -> ID PUNTO ID ASG
Rule 33    funcion -> ID PA valores PC PYC
Rule 34    funcion -> ID PA PC PYC
Rule 35    funcion -> ID PA valores COMA valores PC PYC
Rule 36    print -> PRIFINT PA ID PC PYC
Rule 37    input -> IFINPUFUT PA ID PC PYC
Rule 38    declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
Rule 39    condicion -> valores operadores valores
Rule 40    condicion -> valores
Rule 41    condicion -> valores operadores_logicos condicion
Rule 42    condicion -> valores NOT valores
Rule 43    operacion_matematica -> SUM
Rule 44    operacion_matematica -> RES
Rule 45    operacion_matematica -> MUL
Rule 46    operacion_matematica -> DIV
Rule 47    operacion_matematica -> RED
Rule 48    operacion_matematica -> POT
Rule 49    valores -> INT
Rule 50    valores -> CHAR
Rule 51    valores -> TRUFUEFE
Rule 52    valores -> FAFALSEFE
Rule 53    valores -> PCC
Rule 54    valores -> ID
Rule 55    operadores -> MEN
Rule 56    operadores -> MAY
Rule 57    operadores -> MENIG
Rule 58    operadores -> MAYIG
Rule 59    operadores -> CMP
Rule 60    operadores -> DIF
Rule 61    operadores_logicos -> AND
Rule 62    operadores_logicos -> OR
Rule 63    empty -> <empty>

Terminals, with rules where they appear

AFARRAFAY            : 13
AND                  : 61
ASG                  : 30 31 32
BOFOOFOL             : 17
CA                   : 
CC                   : 
CHAFAR               : 16
CHAR                 : 50
CMP                  : 59
COMA                 : 9 35
DIF                  : 60
DIV                  : 46
EFELSEFE             : 28
FAFALSEFE            : 52
FLOFOAFAT            : 18
FUNCTION             : 6 7 8 9
ID                   : 5 5 5 6 6 6 7 7 8 9 9 9 9 29 30 30 30 31 32 32 33 34 35 36 37 54
IFIF                 : 27 28
IFINPUFUT            : 37
IFINT                : 10 11
INT                  : 49
LLAVEA               : 5 6 7 8 9 10 27 28 28 38
LLAVEC               : 5 6 7 8 9 10 27 28 28 38
MAFAIFIN             : 10
MAY                  : 56
MAYIG                : 58
MEN                  : 55
MENIG                : 57
MUL                  : 45
NOT                  : 42
OR                   : 62
PA                   : 6 7 8 9 10 27 28 33 34 35 36 37 38
PC                   : 6 7 8 9 10 27 28 33 34 35 36 37 38
PCC                  : 53
POT                  : 48
PRIFINT              : 36
PUNTO                : 32
PYC                  : 5 5 6 7 8 9 10 29 30 31 33 34 35 36 37
REAL                 : 
RED                  : 47
REFETUFURN           : 6 7 8 9 10
RES                  : 44
STRIFING             : 12
STRUFUCT             : 5 14
SUM                  : 43
TRUFUEFE             : 51
VACIO                : 26
VOFOIFID             : 15
WHIFILEFE            : 38
error                : 

Nonterminals, with rules where they appear

asignar_estructuras  : 21
bloque_codigo        : 6 7 8 9 10 19 20 21 22 23 24 25 27 28 28 38
condicion            : 27 28 38 41
declaracion          : 20
declaracion_while    : 25
declarar_estructuras : 1 3
declarar_funciones   : 2 3
declarar_if          : 19
declarar_main        : 1 2 3 4
empty                : 
funcion              : 22
input                : 24
operacion_matematica : 30
operadores           : 39
operadores_logicos   : 41
print                : 23
start                : 0
tipo_dato            : 5 5 6 6 7 8 9 9 9 29 30 31
valores              : 31 33 35 35 39 39 40 41 42 42

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . declarar_estructuras declarar_main
    (2) start -> . declarar_funciones declarar_main
    (3) start -> . declarar_estructuras declarar_funciones declarar_main
    (4) start -> . declarar_main
    (5) declarar_estructuras -> . STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC
    (6) declarar_funciones -> . FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> . FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> . FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> . FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (10) declarar_main -> . IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    STRUFUCT        shift and go to state 5
    FUNCTION        shift and go to state 6
    IFINT           shift and go to state 7

    start                          shift and go to state 1
    declarar_estructuras           shift and go to state 2
    declarar_main                  shift and go to state 3
    declarar_funciones             shift and go to state 4

state 1

    (0) S' -> start .



state 2

    (1) start -> declarar_estructuras . declarar_main
    (3) start -> declarar_estructuras . declarar_funciones declarar_main
    (10) declarar_main -> . IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (6) declarar_funciones -> . FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> . FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> . FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> . FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    IFINT           shift and go to state 7
    FUNCTION        shift and go to state 6

    declarar_main                  shift and go to state 8
    declarar_funciones             shift and go to state 9

state 3

    (4) start -> declarar_main .

    $end            reduce using rule 4 (start -> declarar_main .)


state 4

    (2) start -> declarar_funciones . declarar_main
    (10) declarar_main -> . IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    IFINT           shift and go to state 7

    declarar_main                  shift and go to state 10

state 5

    (5) declarar_estructuras -> STRUFUCT . ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC

    ID              shift and go to state 11


state 6

    (6) declarar_funciones -> FUNCTION . tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> FUNCTION . tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION . tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> FUNCTION . tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 12

state 7

    (10) declarar_main -> IFINT . MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    MAFAIFIN        shift and go to state 21


state 8

    (1) start -> declarar_estructuras declarar_main .

    $end            reduce using rule 1 (start -> declarar_estructuras declarar_main .)


state 9

    (3) start -> declarar_estructuras declarar_funciones . declarar_main
    (10) declarar_main -> . IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    IFINT           shift and go to state 7

    declarar_main                  shift and go to state 22

state 10

    (2) start -> declarar_funciones declarar_main .

    $end            reduce using rule 2 (start -> declarar_funciones declarar_main .)


state 11

    (5) declarar_estructuras -> STRUFUCT ID . LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC

    LLAVEA          shift and go to state 23


state 12

    (6) declarar_funciones -> FUNCTION tipo_dato . ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> FUNCTION tipo_dato . ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato . ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> FUNCTION tipo_dato . ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    ID              shift and go to state 24


state 13

    (11) tipo_dato -> IFINT .

    ID              reduce using rule 11 (tipo_dato -> IFINT .)


state 14

    (12) tipo_dato -> STRIFING .

    ID              reduce using rule 12 (tipo_dato -> STRIFING .)


state 15

    (13) tipo_dato -> AFARRAFAY .

    ID              reduce using rule 13 (tipo_dato -> AFARRAFAY .)


state 16

    (14) tipo_dato -> STRUFUCT .

    ID              reduce using rule 14 (tipo_dato -> STRUFUCT .)


state 17

    (15) tipo_dato -> VOFOIFID .

    ID              reduce using rule 15 (tipo_dato -> VOFOIFID .)


state 18

    (16) tipo_dato -> CHAFAR .

    ID              reduce using rule 16 (tipo_dato -> CHAFAR .)


state 19

    (17) tipo_dato -> BOFOOFOL .

    ID              reduce using rule 17 (tipo_dato -> BOFOOFOL .)


state 20

    (18) tipo_dato -> FLOFOAFAT .

    ID              reduce using rule 18 (tipo_dato -> FLOFOAFAT .)


state 21

    (10) declarar_main -> IFINT MAFAIFIN . PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    PA              shift and go to state 25


state 22

    (3) start -> declarar_estructuras declarar_funciones declarar_main .

    $end            reduce using rule 3 (start -> declarar_estructuras declarar_funciones declarar_main .)


state 23

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA . tipo_dato ID PYC tipo_dato ID PYC LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 26

state 24

    (6) declarar_funciones -> FUNCTION tipo_dato ID . PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> FUNCTION tipo_dato ID . PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID . PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> FUNCTION tipo_dato ID . PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    PA              shift and go to state 27


state 25

    (10) declarar_main -> IFINT MAFAIFIN PA . PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    PC              shift and go to state 28


state 26

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato . ID PYC tipo_dato ID PYC LLAVEC

    ID              shift and go to state 29


state 27

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA . tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (7) declarar_funciones -> FUNCTION tipo_dato ID PA . PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID PA . PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC
    (9) declarar_funciones -> FUNCTION tipo_dato ID PA . tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    PC              shift and go to state 31
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 30

state 28

    (10) declarar_main -> IFINT MAFAIFIN PA PC . LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    LLAVEA          shift and go to state 32


state 29

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID . PYC tipo_dato ID PYC LLAVEC

    PYC             shift and go to state 33


state 30

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato . ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato . ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    ID              shift and go to state 34


state 31

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC . LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC . LLAVEA bloque_codigo REFETUFURN PYC LLAVEC

    LLAVEA          shift and go to state 35


state 32

    (10) declarar_main -> IFINT MAFAIFIN PA PC LLAVEA . bloque_codigo REFETUFURN PYC LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    bloque_codigo                  shift and go to state 36
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 33

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC . tipo_dato ID PYC LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 51

state 34

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID . PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID . COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    PC              shift and go to state 52
    COMA            shift and go to state 53


state 35

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA . bloque_codigo REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA . bloque_codigo REFETUFURN PYC LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 46
    bloque_codigo                  shift and go to state 54
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43

state 36

    (10) declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo . REFETUFURN PYC LLAVEC

    REFETUFURN      shift and go to state 55


state 37

    (19) bloque_codigo -> declarar_if . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    declarar_if                    shift and go to state 37
    bloque_codigo                  shift and go to state 56
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 38

    (20) bloque_codigo -> declaracion . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    declaracion                    shift and go to state 38
    bloque_codigo                  shift and go to state 57
    declarar_if                    shift and go to state 37
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 39

    (21) bloque_codigo -> asignar_estructuras . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    asignar_estructuras            shift and go to state 39
    bloque_codigo                  shift and go to state 58
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 40

    (22) bloque_codigo -> funcion . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    funcion                        shift and go to state 40
    bloque_codigo                  shift and go to state 59
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 41

    (23) bloque_codigo -> print . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    print                          shift and go to state 41
    bloque_codigo                  shift and go to state 60
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 42

    (24) bloque_codigo -> input . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    input                          shift and go to state 42
    bloque_codigo                  shift and go to state 61
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 43

    (25) bloque_codigo -> declaracion_while . bloque_codigo
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    declaracion_while              shift and go to state 43
    bloque_codigo                  shift and go to state 62
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    tipo_dato                      shift and go to state 46

state 44

    (26) bloque_codigo -> VACIO .

    REFETUFURN      reduce using rule 26 (bloque_codigo -> VACIO .)
    LLAVEC          reduce using rule 26 (bloque_codigo -> VACIO .)


state 45

    (27) declarar_if -> IFIF . PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> IFIF . PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC

    PA              shift and go to state 63


state 46

    (29) declaracion -> tipo_dato . ID PYC
    (30) declaracion -> tipo_dato . ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> tipo_dato . ID ASG valores PYC

    ID              shift and go to state 64


state 47

    (32) asignar_estructuras -> ID . PUNTO ID ASG
    (33) funcion -> ID . PA valores PC PYC
    (34) funcion -> ID . PA PC PYC
    (35) funcion -> ID . PA valores COMA valores PC PYC

    PUNTO           shift and go to state 65
    PA              shift and go to state 66


state 48

    (36) print -> PRIFINT . PA ID PC PYC

    PA              shift and go to state 67


state 49

    (37) input -> IFINPUFUT . PA ID PC PYC

    PA              shift and go to state 68


state 50

    (38) declaracion_while -> WHIFILEFE . PA condicion PC LLAVEA bloque_codigo LLAVEC

    PA              shift and go to state 69


state 51

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato . ID PYC LLAVEC

    ID              shift and go to state 70


state 52

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC . LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    LLAVEA          shift and go to state 71


state 53

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA . tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 72

state 54

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo . REFETUFURN ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo . REFETUFURN PYC LLAVEC

    REFETUFURN      shift and go to state 73


state 55

    (10) declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN . PYC LLAVEC

    PYC             shift and go to state 74


state 56

    (19) bloque_codigo -> declarar_if bloque_codigo .

    REFETUFURN      reduce using rule 19 (bloque_codigo -> declarar_if bloque_codigo .)
    LLAVEC          reduce using rule 19 (bloque_codigo -> declarar_if bloque_codigo .)


state 57

    (20) bloque_codigo -> declaracion bloque_codigo .

    REFETUFURN      reduce using rule 20 (bloque_codigo -> declaracion bloque_codigo .)
    LLAVEC          reduce using rule 20 (bloque_codigo -> declaracion bloque_codigo .)


state 58

    (21) bloque_codigo -> asignar_estructuras bloque_codigo .

    REFETUFURN      reduce using rule 21 (bloque_codigo -> asignar_estructuras bloque_codigo .)
    LLAVEC          reduce using rule 21 (bloque_codigo -> asignar_estructuras bloque_codigo .)


state 59

    (22) bloque_codigo -> funcion bloque_codigo .

    REFETUFURN      reduce using rule 22 (bloque_codigo -> funcion bloque_codigo .)
    LLAVEC          reduce using rule 22 (bloque_codigo -> funcion bloque_codigo .)


state 60

    (23) bloque_codigo -> print bloque_codigo .

    REFETUFURN      reduce using rule 23 (bloque_codigo -> print bloque_codigo .)
    LLAVEC          reduce using rule 23 (bloque_codigo -> print bloque_codigo .)


state 61

    (24) bloque_codigo -> input bloque_codigo .

    REFETUFURN      reduce using rule 24 (bloque_codigo -> input bloque_codigo .)
    LLAVEC          reduce using rule 24 (bloque_codigo -> input bloque_codigo .)


state 62

    (25) bloque_codigo -> declaracion_while bloque_codigo .

    REFETUFURN      reduce using rule 25 (bloque_codigo -> declaracion_while bloque_codigo .)
    LLAVEC          reduce using rule 25 (bloque_codigo -> declaracion_while bloque_codigo .)


state 63

    (27) declarar_if -> IFIF PA . condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> IFIF PA . condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (39) condicion -> . valores operadores valores
    (40) condicion -> . valores
    (41) condicion -> . valores operadores_logicos condicion
    (42) condicion -> . valores NOT valores
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    condicion                      shift and go to state 75
    valores                        shift and go to state 76

state 64

    (29) declaracion -> tipo_dato ID . PYC
    (30) declaracion -> tipo_dato ID . ASG ID operacion_matematica ID PYC
    (31) declaracion -> tipo_dato ID . ASG valores PYC

    PYC             shift and go to state 83
    ASG             shift and go to state 84


state 65

    (32) asignar_estructuras -> ID PUNTO . ID ASG

    ID              shift and go to state 85


state 66

    (33) funcion -> ID PA . valores PC PYC
    (34) funcion -> ID PA . PC PYC
    (35) funcion -> ID PA . valores COMA valores PC PYC
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    PC              shift and go to state 87
    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    valores                        shift and go to state 86

state 67

    (36) print -> PRIFINT PA . ID PC PYC

    ID              shift and go to state 88


state 68

    (37) input -> IFINPUFUT PA . ID PC PYC

    ID              shift and go to state 89


state 69

    (38) declaracion_while -> WHIFILEFE PA . condicion PC LLAVEA bloque_codigo LLAVEC
    (39) condicion -> . valores operadores valores
    (40) condicion -> . valores
    (41) condicion -> . valores operadores_logicos condicion
    (42) condicion -> . valores NOT valores
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    condicion                      shift and go to state 90
    valores                        shift and go to state 76

state 70

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID . PYC LLAVEC

    PYC             shift and go to state 91


state 71

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA . bloque_codigo REFETUFURN ID PYC LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 46
    bloque_codigo                  shift and go to state 92
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43

state 72

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato . ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    ID              shift and go to state 93


state 73

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN . ID PYC LLAVEC
    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN . PYC LLAVEC

    ID              shift and go to state 94
    PYC             shift and go to state 95


state 74

    (10) declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC . LLAVEC

    LLAVEC          shift and go to state 96


state 75

    (27) declarar_if -> IFIF PA condicion . PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> IFIF PA condicion . PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC

    PC              shift and go to state 97


state 76

    (39) condicion -> valores . operadores valores
    (40) condicion -> valores .
    (41) condicion -> valores . operadores_logicos condicion
    (42) condicion -> valores . NOT valores
    (55) operadores -> . MEN
    (56) operadores -> . MAY
    (57) operadores -> . MENIG
    (58) operadores -> . MAYIG
    (59) operadores -> . CMP
    (60) operadores -> . DIF
    (61) operadores_logicos -> . AND
    (62) operadores_logicos -> . OR

    PC              reduce using rule 40 (condicion -> valores .)
    NOT             shift and go to state 100
    MEN             shift and go to state 101
    MAY             shift and go to state 102
    MENIG           shift and go to state 103
    MAYIG           shift and go to state 104
    CMP             shift and go to state 105
    DIF             shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108

    operadores                     shift and go to state 98
    operadores_logicos             shift and go to state 99

state 77

    (49) valores -> INT .

    NOT             reduce using rule 49 (valores -> INT .)
    MEN             reduce using rule 49 (valores -> INT .)
    MAY             reduce using rule 49 (valores -> INT .)
    MENIG           reduce using rule 49 (valores -> INT .)
    MAYIG           reduce using rule 49 (valores -> INT .)
    CMP             reduce using rule 49 (valores -> INT .)
    DIF             reduce using rule 49 (valores -> INT .)
    AND             reduce using rule 49 (valores -> INT .)
    OR              reduce using rule 49 (valores -> INT .)
    PC              reduce using rule 49 (valores -> INT .)
    COMA            reduce using rule 49 (valores -> INT .)
    PYC             reduce using rule 49 (valores -> INT .)


state 78

    (50) valores -> CHAR .

    NOT             reduce using rule 50 (valores -> CHAR .)
    MEN             reduce using rule 50 (valores -> CHAR .)
    MAY             reduce using rule 50 (valores -> CHAR .)
    MENIG           reduce using rule 50 (valores -> CHAR .)
    MAYIG           reduce using rule 50 (valores -> CHAR .)
    CMP             reduce using rule 50 (valores -> CHAR .)
    DIF             reduce using rule 50 (valores -> CHAR .)
    AND             reduce using rule 50 (valores -> CHAR .)
    OR              reduce using rule 50 (valores -> CHAR .)
    PC              reduce using rule 50 (valores -> CHAR .)
    COMA            reduce using rule 50 (valores -> CHAR .)
    PYC             reduce using rule 50 (valores -> CHAR .)


state 79

    (51) valores -> TRUFUEFE .

    NOT             reduce using rule 51 (valores -> TRUFUEFE .)
    MEN             reduce using rule 51 (valores -> TRUFUEFE .)
    MAY             reduce using rule 51 (valores -> TRUFUEFE .)
    MENIG           reduce using rule 51 (valores -> TRUFUEFE .)
    MAYIG           reduce using rule 51 (valores -> TRUFUEFE .)
    CMP             reduce using rule 51 (valores -> TRUFUEFE .)
    DIF             reduce using rule 51 (valores -> TRUFUEFE .)
    AND             reduce using rule 51 (valores -> TRUFUEFE .)
    OR              reduce using rule 51 (valores -> TRUFUEFE .)
    PC              reduce using rule 51 (valores -> TRUFUEFE .)
    COMA            reduce using rule 51 (valores -> TRUFUEFE .)
    PYC             reduce using rule 51 (valores -> TRUFUEFE .)


state 80

    (52) valores -> FAFALSEFE .

    NOT             reduce using rule 52 (valores -> FAFALSEFE .)
    MEN             reduce using rule 52 (valores -> FAFALSEFE .)
    MAY             reduce using rule 52 (valores -> FAFALSEFE .)
    MENIG           reduce using rule 52 (valores -> FAFALSEFE .)
    MAYIG           reduce using rule 52 (valores -> FAFALSEFE .)
    CMP             reduce using rule 52 (valores -> FAFALSEFE .)
    DIF             reduce using rule 52 (valores -> FAFALSEFE .)
    AND             reduce using rule 52 (valores -> FAFALSEFE .)
    OR              reduce using rule 52 (valores -> FAFALSEFE .)
    PC              reduce using rule 52 (valores -> FAFALSEFE .)
    COMA            reduce using rule 52 (valores -> FAFALSEFE .)
    PYC             reduce using rule 52 (valores -> FAFALSEFE .)


state 81

    (53) valores -> PCC .

    NOT             reduce using rule 53 (valores -> PCC .)
    MEN             reduce using rule 53 (valores -> PCC .)
    MAY             reduce using rule 53 (valores -> PCC .)
    MENIG           reduce using rule 53 (valores -> PCC .)
    MAYIG           reduce using rule 53 (valores -> PCC .)
    CMP             reduce using rule 53 (valores -> PCC .)
    DIF             reduce using rule 53 (valores -> PCC .)
    AND             reduce using rule 53 (valores -> PCC .)
    OR              reduce using rule 53 (valores -> PCC .)
    PC              reduce using rule 53 (valores -> PCC .)
    COMA            reduce using rule 53 (valores -> PCC .)
    PYC             reduce using rule 53 (valores -> PCC .)


state 82

    (54) valores -> ID .

    NOT             reduce using rule 54 (valores -> ID .)
    MEN             reduce using rule 54 (valores -> ID .)
    MAY             reduce using rule 54 (valores -> ID .)
    MENIG           reduce using rule 54 (valores -> ID .)
    MAYIG           reduce using rule 54 (valores -> ID .)
    CMP             reduce using rule 54 (valores -> ID .)
    DIF             reduce using rule 54 (valores -> ID .)
    AND             reduce using rule 54 (valores -> ID .)
    OR              reduce using rule 54 (valores -> ID .)
    PC              reduce using rule 54 (valores -> ID .)
    COMA            reduce using rule 54 (valores -> ID .)


state 83

    (29) declaracion -> tipo_dato ID PYC .

    VACIO           reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    IFIF            reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    ID              reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    PRIFINT         reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    IFINPUFUT       reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    WHIFILEFE       reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    IFINT           reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    STRIFING        reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    AFARRAFAY       reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    STRUFUCT        reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    VOFOIFID        reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    CHAFAR          reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    BOFOOFOL        reduce using rule 29 (declaracion -> tipo_dato ID PYC .)
    FLOFOAFAT       reduce using rule 29 (declaracion -> tipo_dato ID PYC .)


state 84

    (30) declaracion -> tipo_dato ID ASG . ID operacion_matematica ID PYC
    (31) declaracion -> tipo_dato ID ASG . valores PYC
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    ID              shift and go to state 109
    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81

    valores                        shift and go to state 110

state 85

    (32) asignar_estructuras -> ID PUNTO ID . ASG

    ASG             shift and go to state 111


state 86

    (33) funcion -> ID PA valores . PC PYC
    (35) funcion -> ID PA valores . COMA valores PC PYC

    PC              shift and go to state 112
    COMA            shift and go to state 113


state 87

    (34) funcion -> ID PA PC . PYC

    PYC             shift and go to state 114


state 88

    (36) print -> PRIFINT PA ID . PC PYC

    PC              shift and go to state 115


state 89

    (37) input -> IFINPUFUT PA ID . PC PYC

    PC              shift and go to state 116


state 90

    (38) declaracion_while -> WHIFILEFE PA condicion . PC LLAVEA bloque_codigo LLAVEC

    PC              shift and go to state 117


state 91

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC . LLAVEC

    LLAVEC          shift and go to state 118


state 92

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo . REFETUFURN ID PYC LLAVEC

    REFETUFURN      shift and go to state 119


state 93

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID . PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    PC              shift and go to state 120


state 94

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID . PYC LLAVEC

    PYC             shift and go to state 121


state 95

    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC . LLAVEC

    LLAVEC          shift and go to state 122


state 96

    (10) declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC .

    $end            reduce using rule 10 (declarar_main -> IFINT MAFAIFIN PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC .)


state 97

    (27) declarar_if -> IFIF PA condicion PC . LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> IFIF PA condicion PC . LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC

    LLAVEA          shift and go to state 123


state 98

    (39) condicion -> valores operadores . valores
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    valores                        shift and go to state 124

state 99

    (41) condicion -> valores operadores_logicos . condicion
    (39) condicion -> . valores operadores valores
    (40) condicion -> . valores
    (41) condicion -> . valores operadores_logicos condicion
    (42) condicion -> . valores NOT valores
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    valores                        shift and go to state 76
    condicion                      shift and go to state 125

state 100

    (42) condicion -> valores NOT . valores
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    valores                        shift and go to state 126

state 101

    (55) operadores -> MEN .

    INT             reduce using rule 55 (operadores -> MEN .)
    CHAR            reduce using rule 55 (operadores -> MEN .)
    TRUFUEFE        reduce using rule 55 (operadores -> MEN .)
    FAFALSEFE       reduce using rule 55 (operadores -> MEN .)
    PCC             reduce using rule 55 (operadores -> MEN .)
    ID              reduce using rule 55 (operadores -> MEN .)


state 102

    (56) operadores -> MAY .

    INT             reduce using rule 56 (operadores -> MAY .)
    CHAR            reduce using rule 56 (operadores -> MAY .)
    TRUFUEFE        reduce using rule 56 (operadores -> MAY .)
    FAFALSEFE       reduce using rule 56 (operadores -> MAY .)
    PCC             reduce using rule 56 (operadores -> MAY .)
    ID              reduce using rule 56 (operadores -> MAY .)


state 103

    (57) operadores -> MENIG .

    INT             reduce using rule 57 (operadores -> MENIG .)
    CHAR            reduce using rule 57 (operadores -> MENIG .)
    TRUFUEFE        reduce using rule 57 (operadores -> MENIG .)
    FAFALSEFE       reduce using rule 57 (operadores -> MENIG .)
    PCC             reduce using rule 57 (operadores -> MENIG .)
    ID              reduce using rule 57 (operadores -> MENIG .)


state 104

    (58) operadores -> MAYIG .

    INT             reduce using rule 58 (operadores -> MAYIG .)
    CHAR            reduce using rule 58 (operadores -> MAYIG .)
    TRUFUEFE        reduce using rule 58 (operadores -> MAYIG .)
    FAFALSEFE       reduce using rule 58 (operadores -> MAYIG .)
    PCC             reduce using rule 58 (operadores -> MAYIG .)
    ID              reduce using rule 58 (operadores -> MAYIG .)


state 105

    (59) operadores -> CMP .

    INT             reduce using rule 59 (operadores -> CMP .)
    CHAR            reduce using rule 59 (operadores -> CMP .)
    TRUFUEFE        reduce using rule 59 (operadores -> CMP .)
    FAFALSEFE       reduce using rule 59 (operadores -> CMP .)
    PCC             reduce using rule 59 (operadores -> CMP .)
    ID              reduce using rule 59 (operadores -> CMP .)


state 106

    (60) operadores -> DIF .

    INT             reduce using rule 60 (operadores -> DIF .)
    CHAR            reduce using rule 60 (operadores -> DIF .)
    TRUFUEFE        reduce using rule 60 (operadores -> DIF .)
    FAFALSEFE       reduce using rule 60 (operadores -> DIF .)
    PCC             reduce using rule 60 (operadores -> DIF .)
    ID              reduce using rule 60 (operadores -> DIF .)


state 107

    (61) operadores_logicos -> AND .

    INT             reduce using rule 61 (operadores_logicos -> AND .)
    CHAR            reduce using rule 61 (operadores_logicos -> AND .)
    TRUFUEFE        reduce using rule 61 (operadores_logicos -> AND .)
    FAFALSEFE       reduce using rule 61 (operadores_logicos -> AND .)
    PCC             reduce using rule 61 (operadores_logicos -> AND .)
    ID              reduce using rule 61 (operadores_logicos -> AND .)


state 108

    (62) operadores_logicos -> OR .

    INT             reduce using rule 62 (operadores_logicos -> OR .)
    CHAR            reduce using rule 62 (operadores_logicos -> OR .)
    TRUFUEFE        reduce using rule 62 (operadores_logicos -> OR .)
    FAFALSEFE       reduce using rule 62 (operadores_logicos -> OR .)
    PCC             reduce using rule 62 (operadores_logicos -> OR .)
    ID              reduce using rule 62 (operadores_logicos -> OR .)


state 109

    (30) declaracion -> tipo_dato ID ASG ID . operacion_matematica ID PYC
    (54) valores -> ID .
    (43) operacion_matematica -> . SUM
    (44) operacion_matematica -> . RES
    (45) operacion_matematica -> . MUL
    (46) operacion_matematica -> . DIV
    (47) operacion_matematica -> . RED
    (48) operacion_matematica -> . POT

    PYC             reduce using rule 54 (valores -> ID .)
    SUM             shift and go to state 128
    RES             shift and go to state 129
    MUL             shift and go to state 130
    DIV             shift and go to state 131
    RED             shift and go to state 132
    POT             shift and go to state 133

    operacion_matematica           shift and go to state 127

state 110

    (31) declaracion -> tipo_dato ID ASG valores . PYC

    PYC             shift and go to state 134


state 111

    (32) asignar_estructuras -> ID PUNTO ID ASG .

    VACIO           reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    IFIF            reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    ID              reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    PRIFINT         reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    IFINPUFUT       reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    WHIFILEFE       reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    IFINT           reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    STRIFING        reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    AFARRAFAY       reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    STRUFUCT        reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    VOFOIFID        reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    CHAFAR          reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    BOFOOFOL        reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)
    FLOFOAFAT       reduce using rule 32 (asignar_estructuras -> ID PUNTO ID ASG .)


state 112

    (33) funcion -> ID PA valores PC . PYC

    PYC             shift and go to state 135


state 113

    (35) funcion -> ID PA valores COMA . valores PC PYC
    (49) valores -> . INT
    (50) valores -> . CHAR
    (51) valores -> . TRUFUEFE
    (52) valores -> . FAFALSEFE
    (53) valores -> . PCC
    (54) valores -> . ID

    INT             shift and go to state 77
    CHAR            shift and go to state 78
    TRUFUEFE        shift and go to state 79
    FAFALSEFE       shift and go to state 80
    PCC             shift and go to state 81
    ID              shift and go to state 82

    valores                        shift and go to state 136

state 114

    (34) funcion -> ID PA PC PYC .

    VACIO           reduce using rule 34 (funcion -> ID PA PC PYC .)
    IFIF            reduce using rule 34 (funcion -> ID PA PC PYC .)
    ID              reduce using rule 34 (funcion -> ID PA PC PYC .)
    PRIFINT         reduce using rule 34 (funcion -> ID PA PC PYC .)
    IFINPUFUT       reduce using rule 34 (funcion -> ID PA PC PYC .)
    WHIFILEFE       reduce using rule 34 (funcion -> ID PA PC PYC .)
    IFINT           reduce using rule 34 (funcion -> ID PA PC PYC .)
    STRIFING        reduce using rule 34 (funcion -> ID PA PC PYC .)
    AFARRAFAY       reduce using rule 34 (funcion -> ID PA PC PYC .)
    STRUFUCT        reduce using rule 34 (funcion -> ID PA PC PYC .)
    VOFOIFID        reduce using rule 34 (funcion -> ID PA PC PYC .)
    CHAFAR          reduce using rule 34 (funcion -> ID PA PC PYC .)
    BOFOOFOL        reduce using rule 34 (funcion -> ID PA PC PYC .)
    FLOFOAFAT       reduce using rule 34 (funcion -> ID PA PC PYC .)


state 115

    (36) print -> PRIFINT PA ID PC . PYC

    PYC             shift and go to state 137


state 116

    (37) input -> IFINPUFUT PA ID PC . PYC

    PYC             shift and go to state 138


state 117

    (38) declaracion_while -> WHIFILEFE PA condicion PC . LLAVEA bloque_codigo LLAVEC

    LLAVEA          shift and go to state 139


state 118

    (5) declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC .

    IFINT           reduce using rule 5 (declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC .)
    FUNCTION        reduce using rule 5 (declarar_estructuras -> STRUFUCT ID LLAVEA tipo_dato ID PYC tipo_dato ID PYC LLAVEC .)


state 119

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN . ID PYC LLAVEC

    ID              shift and go to state 140


state 120

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC . LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC

    LLAVEA          shift and go to state 141


state 121

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC . LLAVEC

    LLAVEC          shift and go to state 142


state 122

    (8) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC .

    IFINT           reduce using rule 8 (declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN PYC LLAVEC .)


state 123

    (27) declarar_if -> IFIF PA condicion PC LLAVEA . bloque_codigo LLAVEC
    (28) declarar_if -> IFIF PA condicion PC LLAVEA . bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    bloque_codigo                  shift and go to state 143
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 124

    (39) condicion -> valores operadores valores .

    PC              reduce using rule 39 (condicion -> valores operadores valores .)


state 125

    (41) condicion -> valores operadores_logicos condicion .

    PC              reduce using rule 41 (condicion -> valores operadores_logicos condicion .)


state 126

    (42) condicion -> valores NOT valores .

    PC              reduce using rule 42 (condicion -> valores NOT valores .)


state 127

    (30) declaracion -> tipo_dato ID ASG ID operacion_matematica . ID PYC

    ID              shift and go to state 144


state 128

    (43) operacion_matematica -> SUM .

    ID              reduce using rule 43 (operacion_matematica -> SUM .)


state 129

    (44) operacion_matematica -> RES .

    ID              reduce using rule 44 (operacion_matematica -> RES .)


state 130

    (45) operacion_matematica -> MUL .

    ID              reduce using rule 45 (operacion_matematica -> MUL .)


state 131

    (46) operacion_matematica -> DIV .

    ID              reduce using rule 46 (operacion_matematica -> DIV .)


state 132

    (47) operacion_matematica -> RED .

    ID              reduce using rule 47 (operacion_matematica -> RED .)


state 133

    (48) operacion_matematica -> POT .

    ID              reduce using rule 48 (operacion_matematica -> POT .)


state 134

    (31) declaracion -> tipo_dato ID ASG valores PYC .

    VACIO           reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    IFIF            reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    ID              reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    PRIFINT         reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    IFINPUFUT       reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    WHIFILEFE       reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    IFINT           reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    STRIFING        reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    AFARRAFAY       reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    STRUFUCT        reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    VOFOIFID        reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    CHAFAR          reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    BOFOOFOL        reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)
    FLOFOAFAT       reduce using rule 31 (declaracion -> tipo_dato ID ASG valores PYC .)


state 135

    (33) funcion -> ID PA valores PC PYC .

    VACIO           reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    IFIF            reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    ID              reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    PRIFINT         reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    IFINPUFUT       reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    WHIFILEFE       reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    IFINT           reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    STRIFING        reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    AFARRAFAY       reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    STRUFUCT        reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    VOFOIFID        reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    CHAFAR          reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    BOFOOFOL        reduce using rule 33 (funcion -> ID PA valores PC PYC .)
    FLOFOAFAT       reduce using rule 33 (funcion -> ID PA valores PC PYC .)


state 136

    (35) funcion -> ID PA valores COMA valores . PC PYC

    PC              shift and go to state 145


state 137

    (36) print -> PRIFINT PA ID PC PYC .

    VACIO           reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    IFIF            reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    ID              reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    PRIFINT         reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    IFINPUFUT       reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    WHIFILEFE       reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    IFINT           reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    STRIFING        reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    AFARRAFAY       reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    STRUFUCT        reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    VOFOIFID        reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    CHAFAR          reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    BOFOOFOL        reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)
    FLOFOAFAT       reduce using rule 36 (print -> PRIFINT PA ID PC PYC .)


state 138

    (37) input -> IFINPUFUT PA ID PC PYC .

    VACIO           reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    IFIF            reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    ID              reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    PRIFINT         reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    IFINPUFUT       reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    WHIFILEFE       reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    IFINT           reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    STRIFING        reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    AFARRAFAY       reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    STRUFUCT        reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    VOFOIFID        reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    CHAFAR          reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    BOFOOFOL        reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)
    FLOFOAFAT       reduce using rule 37 (input -> IFINPUFUT PA ID PC PYC .)


state 139

    (38) declaracion_while -> WHIFILEFE PA condicion PC LLAVEA . bloque_codigo LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    bloque_codigo                  shift and go to state 146
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 140

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID . PYC LLAVEC

    PYC             shift and go to state 147


state 141

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA . bloque_codigo REFETUFURN ID PYC LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    tipo_dato                      shift and go to state 46
    bloque_codigo                  shift and go to state 148
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43

state 142

    (7) declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .

    IFINT           reduce using rule 7 (declarar_funciones -> FUNCTION tipo_dato ID PA PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .)


state 143

    (27) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo . LLAVEC
    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo . LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC

    LLAVEC          shift and go to state 149


state 144

    (30) declaracion -> tipo_dato ID ASG ID operacion_matematica ID . PYC

    PYC             shift and go to state 150


state 145

    (35) funcion -> ID PA valores COMA valores PC . PYC

    PYC             shift and go to state 151


state 146

    (38) declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo . LLAVEC

    LLAVEC          shift and go to state 152


state 147

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC . LLAVEC

    LLAVEC          shift and go to state 153


state 148

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo . REFETUFURN ID PYC LLAVEC

    REFETUFURN      shift and go to state 154


state 149

    (27) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .
    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC . EFELSEFE LLAVEA bloque_codigo LLAVEC

    VACIO           reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFIF            reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    ID              reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    PRIFINT         reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFINPUFUT       reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    WHIFILEFE       reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFINT           reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    STRIFING        reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    AFARRAFAY       reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    STRUFUCT        reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    VOFOIFID        reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    CHAFAR          reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    BOFOOFOL        reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    FLOFOAFAT       reduce using rule 27 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    EFELSEFE        shift and go to state 155


state 150

    (30) declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .

    VACIO           reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    IFIF            reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    ID              reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    PRIFINT         reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    IFINPUFUT       reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    WHIFILEFE       reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    IFINT           reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    STRIFING        reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    AFARRAFAY       reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    STRUFUCT        reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    VOFOIFID        reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    CHAFAR          reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    BOFOOFOL        reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)
    FLOFOAFAT       reduce using rule 30 (declaracion -> tipo_dato ID ASG ID operacion_matematica ID PYC .)


state 151

    (35) funcion -> ID PA valores COMA valores PC PYC .

    VACIO           reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    IFIF            reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    ID              reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    PRIFINT         reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    IFINPUFUT       reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    WHIFILEFE       reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    IFINT           reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    STRIFING        reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    AFARRAFAY       reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    STRUFUCT        reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    VOFOIFID        reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    CHAFAR          reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    BOFOOFOL        reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)
    FLOFOAFAT       reduce using rule 35 (funcion -> ID PA valores COMA valores PC PYC .)


state 152

    (38) declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .

    VACIO           reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFIF            reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    ID              reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    PRIFINT         reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFINPUFUT       reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    WHIFILEFE       reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    IFINT           reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    STRIFING        reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    AFARRAFAY       reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    STRUFUCT        reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    VOFOIFID        reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    CHAFAR          reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    BOFOOFOL        reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)
    FLOFOAFAT       reduce using rule 38 (declaracion_while -> WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC .)


state 153

    (6) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .

    IFINT           reduce using rule 6 (declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .)


state 154

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN . ID PYC LLAVEC

    ID              shift and go to state 156


state 155

    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE . LLAVEA bloque_codigo LLAVEC

    LLAVEA          shift and go to state 157


state 156

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID . PYC LLAVEC

    PYC             shift and go to state 158


state 157

    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA . bloque_codigo LLAVEC
    (19) bloque_codigo -> . declarar_if bloque_codigo
    (20) bloque_codigo -> . declaracion bloque_codigo
    (21) bloque_codigo -> . asignar_estructuras bloque_codigo
    (22) bloque_codigo -> . funcion bloque_codigo
    (23) bloque_codigo -> . print bloque_codigo
    (24) bloque_codigo -> . input bloque_codigo
    (25) bloque_codigo -> . declaracion_while bloque_codigo
    (26) bloque_codigo -> . VACIO
    (27) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC
    (28) declarar_if -> . IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC
    (29) declaracion -> . tipo_dato ID PYC
    (30) declaracion -> . tipo_dato ID ASG ID operacion_matematica ID PYC
    (31) declaracion -> . tipo_dato ID ASG valores PYC
    (32) asignar_estructuras -> . ID PUNTO ID ASG
    (33) funcion -> . ID PA valores PC PYC
    (34) funcion -> . ID PA PC PYC
    (35) funcion -> . ID PA valores COMA valores PC PYC
    (36) print -> . PRIFINT PA ID PC PYC
    (37) input -> . IFINPUFUT PA ID PC PYC
    (38) declaracion_while -> . WHIFILEFE PA condicion PC LLAVEA bloque_codigo LLAVEC
    (11) tipo_dato -> . IFINT
    (12) tipo_dato -> . STRIFING
    (13) tipo_dato -> . AFARRAFAY
    (14) tipo_dato -> . STRUFUCT
    (15) tipo_dato -> . VOFOIFID
    (16) tipo_dato -> . CHAFAR
    (17) tipo_dato -> . BOFOOFOL
    (18) tipo_dato -> . FLOFOAFAT

    VACIO           shift and go to state 44
    IFIF            shift and go to state 45
    ID              shift and go to state 47
    PRIFINT         shift and go to state 48
    IFINPUFUT       shift and go to state 49
    WHIFILEFE       shift and go to state 50
    IFINT           shift and go to state 13
    STRIFING        shift and go to state 14
    AFARRAFAY       shift and go to state 15
    STRUFUCT        shift and go to state 16
    VOFOIFID        shift and go to state 17
    CHAFAR          shift and go to state 18
    BOFOOFOL        shift and go to state 19
    FLOFOAFAT       shift and go to state 20

    bloque_codigo                  shift and go to state 159
    declarar_if                    shift and go to state 37
    declaracion                    shift and go to state 38
    asignar_estructuras            shift and go to state 39
    funcion                        shift and go to state 40
    print                          shift and go to state 41
    input                          shift and go to state 42
    declaracion_while              shift and go to state 43
    tipo_dato                      shift and go to state 46

state 158

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC . LLAVEC

    LLAVEC          shift and go to state 160


state 159

    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo . LLAVEC

    LLAVEC          shift and go to state 161


state 160

    (9) declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .

    IFINT           reduce using rule 9 (declarar_funciones -> FUNCTION tipo_dato ID PA tipo_dato ID COMA tipo_dato ID PC LLAVEA bloque_codigo REFETUFURN ID PYC LLAVEC .)


state 161

    (28) declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .

    VACIO           reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    IFIF            reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    ID              reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    PRIFINT         reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    IFINPUFUT       reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    WHIFILEFE       reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    IFINT           reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    STRIFING        reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    AFARRAFAY       reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    STRUFUCT        reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    VOFOIFID        reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    CHAFAR          reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    BOFOOFOL        reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)
    FLOFOAFAT       reduce using rule 28 (declarar_if -> IFIF PA condicion PC LLAVEA bloque_codigo LLAVEC EFELSEFE LLAVEA bloque_codigo LLAVEC .)

